# -*- coding: utf-8 -*-
"""Graficar_se√±ales_EMG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TrqG0b-WrDqJRDHxU9ZEQH8n5_vkQcwW
"""

pip install h5py matplotlib

!pip install neurokit2

import h5py
import numpy as np
import matplotlib.pyplot as plt
import neurokit2 as nk

# Lista de archivos cargados previamente en el entorno
archivos_mov2 = [
    "MOVIMIENTO_21.h5",
    "MOVIMIENTO_22.h5",
    "MOVIMIENTO_23.h5"
]

# Frecuencia de muestreo (ajusta si conoces el valor exacto)
fs = 1000  # Hz

# Funci√≥n para procesar y graficar cada archivo
def procesar_y_graficar(nombre_archivo):
    with h5py.File(nombre_archivo, 'r') as f:
        # Print the keys to check what datasets/groups are available
        print(f"Keys in {nombre_archivo}: {list(f.keys())}")

        # Try to access the data using the expected key
        try:
            emg = f["98:D3:51:FD:71:01/support/level_1000/channel_1/mean"][:]  # Added flatten()
        except KeyError:
            print(f"Key '/98:D3:61:FD:78:31/raw/channel_1' not found in {nombre_archivo}")
            # Handle the error, e.g., skip this file or use a different key
            return

        nSeq = f['/98:D3:61:FD:78:31/raw/nSeq'][:]

    # Procesar se√±al EMG con neurokit2
    emg_procesado, info = nk.emg_process(emg, sampling_rate=fs)

    # Graficar
    print(f"\nüìä Procesamiento de: {nombre_archivo}")
    fig = nk.emg_plot(emg_procesado, info)
    plt.tight_layout()
    plt.savefig(f"{nombre_archivo.replace('.h5', '')}_emg_plot.png", dpi=300)
    plt.show()

# Procesar y graficar cada archivo
for archivo in archivos_mov2:
    procesar_y_graficar(archivo)

import h5py
import numpy as np
import matplotlib.pyplot as plt
import neurokit2 as nk


# Lista de archivos de se√±ales de reposo
archivos_reposo = [
    "REPOSO 1.h5",
    "REPOSO 2.h5",
    "REPOSO 3.h5"
]


# Frecuencia de muestreo (aj√∫stalo si conoces el valor exacto)
sampling_rate = 1000  # Hz

# Funci√≥n para graficar EMG por archivo
def graficar_emg(nombre_archivo):
    with h5py.File(nombre_archivo, 'r') as f:
        emg = f['/98:D3:61:FD:78:31/raw/channel_1'][:]
        nSeq = f['/98:D3:61:FD:78:31/raw/nSeq'][:]

    tiempo = np.arange(len(nSeq)) / sampling_rate

    plt.figure(figsize=(12, 4))
    plt.plot(tiempo, emg, label='EMG', color='blue')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Amplitud (uV)')
    plt.title(f"Se√±al EMG: {nombre_archivo}")
    plt.grid(True)
    plt.ylim([0, 1000])
    plt.tight_layout()
    plt.savefig(f"{nombre_archivo.replace('.h5', '')}_emg_plot.png", dpi=300)
    plt.show()

# Ejecutar para cada archivo
for archivo in archivos_reposo:
    graficar_emg(archivo)

# Lista de nombres de archivos (ajusta si los nombres difieren)
archivos3 = [
    "FUERZA 3.1.h5",
    "FUERZA 3.2.h5",
    "FUERZA 3.3.h5"
]

# Frecuencia de muestreo (ajusta si conoces el valor exacto)
fs = 1000  # Hz

# Funci√≥n para procesar y graficar cada archivo
def procesar_y_graficar(nombre_archivo):
    with h5py.File(nombre_archivo, 'r') as f:
        try:
            emg = f['/98:D3:61:FD:78:31/raw/channel_1'][:].flatten()
            if len(emg) < 100:
                print(f"‚ö†Ô∏è Se√±al muy corta en {nombre_archivo}, se omite.")
                return
            emg = emg / np.max(emg)  # <- Normalizaci√≥n
        except KeyError:
            print(f"‚ùå Canal no encontrado en {nombre_archivo}")
            return

    try:
        emg_procesado, info = nk.emg_process(emg, sampling_rate=fs)
        print(f"\nüìä Procesamiento de: {nombre_archivo}")
        fig = nk.emg_plot(emg_procesado, info)
        plt.tight_layout()
        plt.savefig(f"{nombre_archivo.replace('.h5', '')}_emg_plot.png", dpi=300)
        plt.show()
    except Exception as e:
        print(f"‚ùå Error procesando {nombre_archivo}: {e}")

# Procesar y graficar cada archivo
for archivo in archivos3:
    procesar_y_graficar(archivo)

# Paso 3: Lista de archivos cargados en el entorno
archivos_flexion = [
    "flexion_abajo1.h5",
    "flexion_abajo2.h5",
    "flexion_abajo3.h5"
]

# Paso 4: Frecuencia de muestreo (aj√∫stala si conoces el valor exacto)
fs = 1000  # Hz

# Paso 5: Funci√≥n para procesar y graficar
def procesar_y_graficar(nombre_archivo):
    try:
        with h5py.File(nombre_archivo, 'r') as f:
            emg = f['/98:D3:61:FD:78:31/raw/channel_1'][:].flatten()
            emg = emg / np.max(emg)  # Normalizaci√≥n
    except Exception as e:
        print(f"‚ùå Error leyendo {nombre_archivo}: {e}")
        return

    try:
        emg_procesado, info = nk.emg_process(emg, sampling_rate=fs)
        print(f"\nüìä Procesamiento de: {nombre_archivo}")
        fig = nk.emg_plot(emg_procesado, info)
        plt.tight_layout()
        plt.savefig(f"{nombre_archivo.replace('.h5', '')}_emg_plot.png", dpi=300)
        plt.show()
    except Exception as e:
        print(f"‚ùå Error procesando {nombre_archivo}: {e}")

# Paso 6: Ejecutar la funci√≥n para cada archivo
for archivo in archivos_flexion:
    procesar_y_graficar(archivo)